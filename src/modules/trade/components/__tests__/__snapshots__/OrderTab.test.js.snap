// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<OrderTab /> active: true dark: renders correctly 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  collapsable={undefined}
  hasTVPreferredFocus={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "borderColor": "#000000",
      "borderRightWidth": 1,
      "flexBasis": 0,
      "flexGrow": 1,
      "flexShrink": 1,
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <Text
    accessible={true}
    active={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Array [
        Object {
          "color": "#fcfcfc",
          "fontFamily": "Open Sans",
        },
        Array [
          Object {
            "color": "#faa632",
            "paddingBottom": 4,
            "paddingLeft": 0,
            "paddingRight": 0,
            "paddingTop": 4,
            "textAlign": "center",
          },
          undefined,
        ],
      ]
    }
  >
    label
  </Text>
</View>
`;

exports[`<OrderTab /> active: true light: renders correctly 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  collapsable={undefined}
  hasTVPreferredFocus={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "borderColor": "#fefaec",
      "borderRightWidth": 1,
      "flexBasis": 0,
      "flexGrow": 1,
      "flexShrink": 1,
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <Text
    accessible={true}
    active={true}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Array [
        Object {
          "color": "#000000",
          "fontFamily": "Open Sans",
        },
        Array [
          Object {
            "color": "#faa632",
            "paddingBottom": 4,
            "paddingLeft": 0,
            "paddingRight": 0,
            "paddingTop": 4,
            "textAlign": "center",
          },
          undefined,
        ],
      ]
    }
  >
    label
  </Text>
</View>
`;

exports[`<OrderTab /> dark: renders correctly 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  collapsable={undefined}
  hasTVPreferredFocus={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "borderColor": "#000000",
      "borderRightWidth": 1,
      "flexBasis": 0,
      "flexGrow": 1,
      "flexShrink": 1,
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <Text
    accessible={true}
    active={false}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Array [
        Object {
          "color": "#fcfcfc",
          "fontFamily": "Open Sans",
        },
        Array [
          Object {
            "backgroundColor": "#464242",
            "color": "#c8c8c8",
            "paddingBottom": 4,
            "paddingLeft": 0,
            "paddingRight": 0,
            "paddingTop": 4,
            "textAlign": "center",
          },
          undefined,
        ],
      ]
    }
  >
    label
  </Text>
</View>
`;

exports[`<OrderTab /> last: true dark: renders correctly 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  collapsable={undefined}
  hasTVPreferredFocus={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "borderColor": "#000000",
      "borderRightWidth": 0,
      "flexBasis": 0,
      "flexGrow": 1,
      "flexShrink": 1,
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <Text
    accessible={true}
    active={false}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Array [
        Object {
          "color": "#fcfcfc",
          "fontFamily": "Open Sans",
        },
        Array [
          Object {
            "backgroundColor": "#464242",
            "color": "#c8c8c8",
            "paddingBottom": 4,
            "paddingLeft": 0,
            "paddingRight": 0,
            "paddingTop": 4,
            "textAlign": "center",
          },
          undefined,
        ],
      ]
    }
  >
    label
  </Text>
</View>
`;

exports[`<OrderTab /> last: true light: renders correctly 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  collapsable={undefined}
  hasTVPreferredFocus={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "borderColor": "#fefaec",
      "borderRightWidth": 0,
      "flexBasis": 0,
      "flexGrow": 1,
      "flexShrink": 1,
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <Text
    accessible={true}
    active={false}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Array [
        Object {
          "color": "#000000",
          "fontFamily": "Open Sans",
        },
        Array [
          Object {
            "backgroundColor": "#eae8e0",
            "color": "#000000",
            "paddingBottom": 4,
            "paddingLeft": 0,
            "paddingRight": 0,
            "paddingTop": 4,
            "textAlign": "center",
          },
          undefined,
        ],
      ]
    }
  >
    label
  </Text>
</View>
`;

exports[`<OrderTab /> light: renders correctly 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  collapsable={undefined}
  hasTVPreferredFocus={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "borderColor": "#fefaec",
      "borderRightWidth": 1,
      "flexBasis": 0,
      "flexGrow": 1,
      "flexShrink": 1,
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <Text
    accessible={true}
    active={false}
    allowFontScaling={true}
    ellipsizeMode="tail"
    style={
      Array [
        Object {
          "color": "#000000",
          "fontFamily": "Open Sans",
        },
        Array [
          Object {
            "backgroundColor": "#eae8e0",
            "color": "#000000",
            "paddingBottom": 4,
            "paddingLeft": 0,
            "paddingRight": 0,
            "paddingTop": 4,
            "textAlign": "center",
          },
          undefined,
        ],
      ]
    }
  >
    label
  </Text>
</View>
`;
